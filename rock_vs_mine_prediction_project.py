# -*- coding: utf-8 -*-
"""rock vs mine prediction project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AO-7pJeM2ZISg5nBpWOuXZASuq38KS_s

**Importing** the dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data collection & Data processing"""

#loading the dataset to pandas dataframe
sonar_data = pd.read_csv("/content/sonar data.csv",header=None)

sonar_data.head()

#no of rows and colums
sonar_data.shape

sonar_data.describe() #describe---> statistical measures of data

sonar_data[60].value_counts()

"""M---> Mine
R---> Rock
"""

sonar_data.groupby(60).mean()

#seperating data and label
x = sonar_data.drop(columns=60,axis=1)
y = sonar_data[60]

print(x)
print(y)

"""Training & Test data"""

x_train,x_test,y_train,y_test = train_test_split(x,y, test_size=0.1, stratify =y, random_state =1)
print(x.shape ,x_train.shape ,x_test.shape)

print(x_train)
print(y_train)

"""Model Training --> logistic regression"""

model = LogisticRegression()

# training the logistic regression model with training data
model.fit(x_train,y_train)

"""Model Evaluation"""

# accuracy on training data
x_train_prediction = model.predict(x_train)
training_data_accuracy = accuracy_score(x_train_prediction,y_train)

print("Accuracy on training data :", training_data_accuracy )

# accuracy on test data
x_test_prediction = model.predict(x_test)
test_data_accuracy = accuracy_score(x_test_prediction,y_test)

print("Accuracy on testing data :", test_data_accuracy )

"""Making a predictive system"""

input_data = (0.0298,0.0615,0.0650,0.0921,0.1615,0.2294,0.2176,0.2033,0.1459,0.0852,0.2476,0.3645,0.2777,0.2826,0.3237,0.4335,0.5638,0.4555,0.4348,0.6433,0.3932,0.1989,0.3540,0.9165,0.9371,0.4620,0.2771,0.6613,0.8028,0.4200,0.5192,0.6962,0.5792,0.8889,0.7863,0.7133,0.7615,0.4401,0.3009,0.3163,0.2809,0.2898,0.0526,0.1867,0.1553,0.1633,0.1252,0.0748,0.0452,0.0064,0.0154,0.0031,0.0153,0.0071,0.0212,0.0076,0.0152,0.0049,0.0200,0.0073)
# changing the input data to numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshape the np array as we are predicting for one instance
input_data_reshaped  = input_data_as_numpy_array.reshape(1,-1)
prediction = model.predict(input_data_reshaped )
print(prediction)

if(prediction[0]=='R'):
  print("The object is a Rock.")
else:
  print("The object is a Mine.")

