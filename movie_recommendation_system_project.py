# -*- coding: utf-8 -*-
"""Movie Recommendation System Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11deqg17eQ__FZ3xnClk4Qonh2HmZqxrQ

Importing Dependies
"""

import numpy as np
import pandas as pd
import difflib # to get most closed name
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

"""Data collection & preprocessing"""

#loading the data from the csv file to a pandas dataset
movies_data = pd.read_csv('/content/movies.csv')

movies_data.head()

# number of rows and columns in a  dataframe
movies_data.shape

# selecting the relevant feature for recommendation (feature selection)
selected_feature = ['keywords','genres','tagline','cast','director']
print(selected_feature)

# replaceing all the missing value with null string
for feature in selected_feature:
  movies_data[feature]=movies_data[feature].fillna('')

#combining all the five selected feature
combine_feature = movies_data['genres']+ ' '+movies_data['keywords']+ ' '+movies_data['tagline']+ ' '+movies_data['cast']+ ' '+movies_data['director']

print(combine_feature)

# converting the text data to feature vector
vectorizer = TfidfVectorizer()

feature_vector = vectorizer.fit_transform(combine_feature)

print(feature_vector)

"""Cosine similarity"""

# getting the similarity score using cosine similarity
similarity = cosine_similarity(feature_vector)

print(similarity)

print(similarity.shape)

# getting the movie name from user 

movie_name = input("Enter your favourite movie name : ")

# creating a list with all movie name given in the dataset 

list_of_all_title = movies_data['title'].tolist()

print(list_of_all_title)

# finding the close match for the movie name given by user

find_close_match = difflib.get_close_matches(movie_name,list_of_all_title)
print(find_close_match)

close_match = find_close_match[0]
print(close_match)

# find the index of the movie wihh title

index_of_the_movie = movies_data[movies_data.title == close_match]['index'].values[0]
print(index_of_the_movie)

# getting a list of similar movies
similarity_score = list(enumerate(similarity[index_of_the_movie]))
print(similarity_score)

len(similarity_score)

# sorting the movies based on similarity score
sorted_similar_movies = sorted(similarity_score, key = lambda x:x[1], reverse = True) # x = similarity score , x:x[0] = index , x[1]= similarity score
print(sorted_similar_movies)

# print the name of similar movies based on index 

print('Movies suggested for you : \n')
i =1
for movie in sorted_similar_movies:
  index = movie[0]
  title_from_index  = movies_data[movies_data.index == index]['title'].values[0]
  if(i<30):
    print(i, '.',title_from_index)
    i+=1

"""Movie Recommendation system"""

movie_name = input("Enter your favourite movie name : ")

list_of_all_title = movies_data['title'].tolist()

find_close_match = difflib.get_close_matches(movie_name,list_of_all_title)

close_match = find_close_match[0]

index_of_the_movie = movies_data[movies_data.title == close_match]['index'].values[0]

similarity_score = list(enumerate(similarity[index_of_the_movie]))

sorted_similar_movies = sorted(similarity_score, key = lambda x:x[1], reverse = True)

print('Movies suggested for you : \n')
i =1
for movie in sorted_similar_movies:
  index = movie[0]
  title_from_index  = movies_data[movies_data.index == index]['title'].values[0]
  if(i<30):
    print(i, '.',title_from_index)
    i+=1

