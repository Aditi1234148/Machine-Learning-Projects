# -*- coding: utf-8 -*-
"""Spam Mail Prediction Project .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13FJ6Ov-DLLhS0mUNvO_25cFKiXay_YjY
"""



"""Importing Dependencies"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer #to convert text data into numerical value
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data collection & preprocessing"""

#loading the dataset from csv file to pandas dataframe
row_mail_data = pd.read_csv('/content/mail_data.csv')

print(row_mail_data)

# replace the null value with a null string
mail_data = row_mail_data.where((pd.notnull(row_mail_data)),'')

# printing the first five rows of dataframe
mail_data.head()

# printing the number of rows and column in a dataframe
mail_data.shape

"""Label Encoding"""

#label spam mail as--> 0
# ham mail as--> 1  
mail_data.loc[mail_data['Category'] == 'spam','category',] = 0   
mail_data.loc[mail_data['Category'] == 'ham','category',] = 1

"""

*   spam -->0
*   ham --> 1

"""

# seperating the data as texts and  labels 
x = mail_data['Message']
y = mail_data['category']

print(x)

print(y)

"""spliting the data into training data and test data"""

x_train,x_test,y_train,y_test =train_test_split(x,y,test_size=0.2,random_state=3)

print(x.shape,x_train.shape,x_test.shape)

"""Feature Extraction"""

#transfrom the text data to feature vectors that can be used as input to the logistic regression
feature_extraction = TfidfVectorizer(min_df=1,stop_words='english',lowercase='True')
x_train_features = feature_extraction.fit_transform(x_train)
x_test_features = feature_extraction.transform(x_test)

#convert y_train and y_test values as integers

y_train = y_train.astype('int')
y_test = y_test.astype('int')

print(x_train)

print(x_train_features)

"""Training the Model

Logistic Regression
"""

model = LogisticRegression()

#training the logistic regression model with training data
model.fit(x_train_features,y_train)

"""Evaluating the trained model"""

# prediction on training data
prediction_on_training_data = model.predict(x_train_features)
accuracy_on_training_data = accuracy_score(y_train, prediction_on_training_data)
print("The accuracy score on training data :", accuracy_on_training_data)

# prediction on testing data
prediction_on_testing_data = model.predict(x_test_features)
accuracy_on_testing_data = accuracy_score(y_test, prediction_on_testing_data)
print("The accuracy score on training data :", accuracy_on_testing_data)

"""Building a predictive system"""

input_mail =["Had your mobile 11 months or more? U R entitled to Update to the latest colour mobiles with camera for Free! Call The Mobile Update Co FREE on 08002986030"]


# convert text to feature vectors 
input_data_features = feature_extraction.transform(input_mail)


#making predictions
prediction = model.predict(input_data_features)
print(prediction)
if(prediction[0]==0):
  print("Spam Mail.")
else:
  print("Ham Mail.")

