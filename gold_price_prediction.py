# -*- coding: utf-8 -*-
"""Gold Price Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12p3Xsxr1MUJD5CmhnxpUcA_vNA18IQdL
"""



"""Importing Dependecies"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn import metrics

"""Data collection & processing"""

# loading the csv data to a pandas dataframe
gold_data = pd.read_csv("/content/gld_price_data.csv")

# print first 5 rows from dataset
gold_data.head()

# print last 5 rows of dataframe
gold_data.tail()

# number of rows and column in a dataframe
gold_data.shape

# getting some base info.. about the data
gold_data.info()

# checking number of missing value
gold_data.isnull().sum()

# getting statistical measures of the data
gold_data.describe()

"""correlation

*   positive correlation(columns are directly correlated)

*   negative correlation (columns are inversely correlated)


"""

correlation = gold_data.corr()

# constructing a heat map to understand the correlaton
plt.figure(figsize=(8,8))
sns.heatmap(correlation, cbar =True , square = True , fmt = '.1f',annot = True ,annot_kws={"size":8},cmap='Greens')
plt.show()

# correlation value of gold
print(correlation['GLD'])

# checking the distribution of gold price
sns.distplot(gold_data['GLD'],color ='Green')

"""spliting the features and target(label)"""

x = gold_data.drop(['Date','GLD'],axis =1)
y = gold_data["GLD"]

print(x)
print(y)

"""spliting into training and test data"""

x_train,x_test, y_train,y_test = train_test_split(x,y,test_size = 0.2,random_state =2)

"""Model Training: Random forest Regrresor"""

regressor = RandomForestRegressor(n_estimators=100)

# training the model 
regressor.fit(x_train,y_train)

"""
model evaluation 


"""

# prediction on test data
test_data_prediction = regressor.predict(x_test)

print(test_data_prediction)

# R squared error 
error_score = metrics.r2_score(y_test,test_data_prediction)
print('R squared error : ' ,error_score)



"""compare the actual value and predicted value in a plot"""

y_test = list(y_test)
plt.plot(y_test, color= 'Red', label = 'Actual value')
plt.plot(test_data_prediction, color= 'Green', label = 'Predicted value')
plt.title('Actual vs Predicted Price')
plt.xlabel("Number of values")
plt.ylabel("Gld Price")
plt.legend()
plt.show()

